{##
 # This file is part of the SgDatatablesBundle package.
 #
 # (c) stwe <https://github.com/stwe/DatatablesBundle>
 #
 # For the full copyright and license information, please view the LICENSE
 # file that was distributed with this source code.
 #}
{% macro link_title(action) %}
    {% if action.label is null and action.icon is null %}
        {{ action.route }}
    {% else %}
        <span class="{{ action.icon }}"></span> {{ action.label }}
    {% endif %}
{% endmacro %}

{% macro attributes(action) %}
    {% for key, value in action.attributes %}
        {{ key }}="{{ value }}"
    {% endfor %}
{% endmacro %}

{% macro confirm_message(action) %}
    {% if true == action.confirm %}
        {% if action.confirmMessage is not null %}
            data-message="{{ action.confirmMessage }}"
        {% else %}
            data-message="{{ 'sg.datatables.confirmMessage'|trans({}, 'messages') }}"
        {% endif %}
    {% endif %}
{% endmacro %}

{% set multiselect_actions %}
    {% for action in actions %}
        {% if true == action.callRenderIfClosure %}
            {% if action.routeParameters is not null %}
                {% if app.request.locale is defined and app.request.locale is not null %}
                    {% if '_locale' in set_route_parameters|keys %}
                        {% set set_route_parameters = set_route_parameters|merge({ '_locale': app.request.locale }) %}
                    {% endif %}
                {% endif %}
                {{ action.startHtml|raw }}
                <a href="{{ path(action.route, set_route_parameters) }}" {{ _self.attributes(action) }} {{ _self.confirm_message(action) }}>
                    {{ _self.link_title(action) }}
                </a>
                {{ action.endHtml|raw }}
            {% else %}
                {{ action.startHtml|raw }}
                <a href="{{ path(action.route) }}" {{ _self.attributes(action) }} {{ _self.confirm_message(action) }}>
                    {{ _self.link_title(action) }}
                </a>
                {{ action.endHtml|raw }}
            {% endif %}
        {% endif %}
    {% endfor %}
{% endset %}

{# add multiselect actions #}
{% if dom_id is null %}
    $("#sg-datatables-{{ datatable_name }}-multiselect-actions").append("{{ multiselect_actions|e('js') }}");
{% else %}
    $("#{{ dom_id }}").append("{{ multiselect_actions|e('js') }}");
{% endif %}

{# function to update the check-all-checkbox #}
function updateCheckAll() {
    var cbox_all = $("#sg-datatables-{{ datatable_name }} tbody input.sg-datatables-{{ datatable_name }}-multiselect-checkbox:checkbox");
    var cbox_checked = $("#sg-datatables-{{ datatable_name }} tbody input.sg-datatables-{{ datatable_name }}-multiselect-checkbox:checkbox:checked");
    var cbox_checkall = $("#sg-datatables-{{ datatable_name }} input.sg-datatables-{{ datatable_name }}-multiselect-checkall:checkbox");

    if(cbox_checked.length === 0){
        cbox_checkall.prop('checked', false);
        cbox_checkall.prop('indeterminate', false);
    } else if (cbox_checked.length === cbox_all.length){
        cbox_checkall.prop('checked', true);
        cbox_checkall.prop('indeterminate', false);
    } else {
        cbox_checkall.prop('checked', false);
        cbox_checkall.prop('indeterminate', true);
    }
}

{# handle row <tr> click #}
$("#sg-datatables-{{ datatable_name }} tbody").on("click", "tr", function () {
    {# add 'selected' class #}
    if ($(this).find("input").length) {
        $(this).toggleClass("selected");
    }

    {# set !checked for the row checkbox #}
    $(this).find("input.sg-datatables-{{ datatable_name }}-multiselect-checkbox:checkbox").each(function() {
        this.checked = !this.checked;
    });

    updateCheckAll();
});

{# handle checkbox <input> click #}
$("#sg-datatables-{{ datatable_name }} tbody").on("click", "input.sg-datatables-{{ datatable_name }}-multiselect-checkbox:checkbox", function () {
    this.checked = !this.checked;
    updateCheckAll();
});

{# select/unselect all checkboxes #}
$("#sg-datatables-{{ datatable_name }}").on("click", "input.sg-datatables-{{ datatable_name }}-multiselect-checkall:checkbox", function () {
    $("input.sg-datatables-{{ datatable_name }}-multiselect-checkbox").prop('checked', $(this).prop("checked"));
    var propCheck = $(this).prop("checked");
    $("#sg-datatables-{{ datatable_name }} tbody tr").each(function(){
        if ($(this).find("input").length) {
            if (true == propCheck) {
                $(this).addClass("selected");
            } else {
                $(this).removeClass("selected");
            }
        }
    });
});

{# handle multiselect action click #}
$(".sg-datatables-{{ datatable_name }}-multiselect-action").on("click", function(event) {
    event.preventDefault();

    if (oTable.rows(".selected").data().length > 0) {
        if ($(this).data("message")) {
            if (!confirm($(this).data("message"))) {
                return;
            }
        }

        var items = $.map(oTable.rows(".selected").data(), function (i) {
            return i
        });

        var pipeline = {{ pipeline }};

        {% set token = csrf_token('multiselect') %}

        $.ajax({
            url: $(this).attr("href"),
            type: "POST",
            cache: false,
            data: {
                'data': items,
                'token': "{{ token }}"
            },
            success: function(msg) {
                if (pipeline > 0) {
                    oTable.clearPipeline().draw();
                } else {
                    oTable.draw();
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                console.log(XMLHttpRequest + ' ' + textStatus + ' '  + errorThrown);
            }
        })
    } else {
        console.log("No row selected.");
    }
});
