<?php

/**
 * This file is part of the SgDatatablesBundle package.
 *
 * (c) stwe <https://github.com/stwe/DatatablesBundle>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Sg\DatatablesBundle\Datatable\Column;

use Symfony\Component\OptionsResolver\OptionsResolver;
use Exception;

/**
 * Class MultiselectColumn
 *
 * @package Sg\DatatablesBundle\Datatable\Column
 */
class MultiselectColumn extends ActionColumn
{
    /**
     * HTML <input> Tag attributes (except 'type' and 'value').
     * Default: null
     *
     * @var null|array
     */
    protected $attributes;

    /**
     * A checkbox value, generated by column name.
     * Default: 'id'
     *
     * @var string
     */
    protected $value;

    //-------------------------------------------------
    // ColumnInterface
    //-------------------------------------------------

    /**
     * {@inheritdoc}
     */
    public function isUnique()
    {
        return true;
    }

    /**
     * {@inheritdoc}
     */
    public function getTemplate()
    {
        return 'SgDatatablesBundle:column:column.html.twig';
    }

    /**
     * {@inheritdoc}
     */
    public function addDataToOutputArray(array &$row)
    {
        $row['sg_datatables_cbox'] = $this->callAddIfClosure($row);
    }

    /**
     * {@inheritdoc}
     */
    public function renderContent(array &$row)
    {
        $value = $row[$this->value];

        $row[$this->getIndex()] = $this->twig->render(
            'SgDatatablesBundle:render:multiselect.html.twig',
            array(
                'attributes' => $this->attributes,
                'value' => $value,
                'start_html' => $this->startHtml,
                'end_html' => $this->endHtml,
            )
        );
    }

    /**
     * {@inheritdoc}
     */
    public function allowedPositions()
    {
        return array(0, self::LAST_POSITION);
    }

    //-------------------------------------------------
    // Options
    //-------------------------------------------------

    /**
     * Config options.
     *
     * @param OptionsResolver $resolver
     *
     * @return $this
     */
    public function configureOptions(OptionsResolver $resolver)
    {
        parent::configureOptions($resolver);

        $resolver->setDefaults(array(
            'attributes' => null,
            'value' => 'id',
            'add_if' => null,
        ));

        $resolver->setAllowedTypes('attributes', array('null', 'array'));
        $resolver->setAllowedTypes('value', 'string');
        $resolver->setAllowedTypes('add_if', array('null', 'Closure'));

        return $this;
    }

    //-------------------------------------------------
    // Getters && Setters
    //-------------------------------------------------

    /**
     * Get attributes.
     *
     * @return null|array
     */
    public function getAttributes()
    {
        return $this->attributes;
    }

    /**
     * Set attributes.
     *
     * @param null|array $attributes
     *
     * @return $this
     * @throws Exception
     */
    public function setAttributes($attributes)
    {
        if (is_array($attributes)) {
            if (array_key_exists('type', $attributes)) {
                throw new Exception('MultiselectColumn::setAttributes(): The type attribute is not supported.');
            }

            if (array_key_exists('value', $attributes)) {
                throw new Exception('MultiselectColumn::setAttributes(): The value attribute is not supported.');
            }
        }

        // @todo: handle 'name' && 'class'

        $this->attributes = $attributes;

        return $this;
    }

    /**
     * Get value.
     *
     * @return string
     */
    public function getValue()
    {
        return $this->value;
    }

    /**
     * Set value.
     *
     * @param string $value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->value = $value;

        return $this;
    }
}
